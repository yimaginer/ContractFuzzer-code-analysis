# 配置 CircleCI 的机器环境
machine:
  services:
    - docker # 启用 Docker 服务，用于运行容器化的构建和测试环境

# 配置依赖项
dependencies:
  cache_directories:
    - "~/.ethash" # 缓存 ethash DAG（由 Hive 生成），用于连续构建以减少时间
    - "~/.docker" # 缓存所有 Docker 镜像，避免每次重新构建镜像
  override:
    # 恢复之前缓存的 Docker 镜像
    - mkdir -p ~/.docker
    - for img in `ls ~/.docker`; do docker load -i ~/.docker/$img; done

    # 拉取 Hive 工具，恢复缓存的 ethash DAG，并进行一次干运行
    - go get -u github.com/karalabe/hive # 下载并更新 Hive 工具
    - (cd ~/.go_workspace/src/github.com/karalabe/hive && mkdir -p workspace/ethash/ ~/.ethash) # 创建 ethash 工作目录
    - (cd ~/.go_workspace/src/github.com/karalabe/hive && cp -r ~/.ethash/. workspace/ethash/) # 恢复缓存的 ethash DAG
    - (cd ~/.go_workspace/src/github.com/karalabe/hive && hive --docker-noshell --client=NONE --test=. --sim=. --loglevel=6) # 使用 Hive 进行一次干运行

    # 缓存所有 Docker 镜像和 ethash DAG
    - for img in `docker images | grep -v "^<none>" | tail -n +2 | awk '{print $1}'`; do docker save $img > ~/.docker/`echo $img | tr '/' ':'`.tar; done # 保存 Docker 镜像到缓存
    - cp -r ~/.go_workspace/src/github.com/karalabe/hive/workspace/ethash/. ~/.ethash # 保存 ethash DAG 到缓存

# 配置测试步骤
test:
  override:
    # 构建 Geth 并移动到已知目录
    - make geth # 使用 Makefile 构建 Geth
    - cp ./build/bin/geth $HOME/geth # 将构建的 Geth 二进制文件复制到 HOME 目录

    # 运行 Hive 并将所有生成的日志移动到公共工件目录
    - (cd ~/.go_workspace/src/github.com/karalabe/hive && hive --docker-noshell --client=go-ethereum:local --override=$HOME/geth --test=. --sim=.) # 使用 Hive 测试 Geth
    - cp -r ~/.go_workspace/src/github.com/karalabe/hive/workspace/logs/* $CIRCLE_ARTIFACTS # 将日志复制到 CircleCI 的工件目录


# circle.yml:

# 用于配置 CircleCI，适合基于 Docker 的构建和测试流程。
# 强调缓存和容器化环境，使用 Hive 工具测试 Geth。

# appveyor.yml:

# 用于配置 AppVeyor，适合 Windows 环境下的构建和测试。
# 强调 Windows 工具链（如 Visual Studio 和 NSIS），用于生成安装包。
# 两者的主要区别在于目标平台和构建工具的选择，分别针对 Linux/Docker 和 Windows 环境优化。

# 二者是不同的 CI/CD 平台，分别适用于不同的操作系统和构建需求。


# CI/CD 全称: Continuous Integration / Continuous Deployment (or Delivery)。
# 意义: 通过自动化构建、测试和部署，提高软件开发效率和交付速度。
# 作用: CI/CD 平台帮助开发者实现代码的自动化构建、测试和部署，减少手动操作，提高开发效率和代码质量。


# CI/CD 平台的作用
# CI/CD 平台是实现持续集成和持续部署的工具，通常提供以下功能：

# 代码构建:
# 自动拉取代码仓库中的代码并进行编译。
# 自动化测试:
# 运行单元测试、集成测试和端到端测试。
# 部署管理:
# 将构建产物部署到测试环境、预生产环境或生产环境。
# 监控和反馈:
# 提供构建、测试和部署的实时反馈，帮助开发者快速发现和解决问题。
